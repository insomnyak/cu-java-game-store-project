openapi: 3.0.0
info:
  title: Game Store
  description: Rene Serulle U1 Capstone. This is a REST Inventory Management Web Service for a Video Game Store
  contact:
    email: rene+GameStoreSupport@insomnyak.com
  version: 0.1.2
servers:
  - url: 'http://localhost:8080'
    description: local dev server

paths:
  /itemType:
    get:
      summary: returns all available item types
      responses:
        '200':
          description: List of all item types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemTypes'
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.
  /salesTaxRate:
    get:
      summary: returns Tax Rates and State Code for every State in which this Game Store conducts business
      responses:
        '200':
          description: List of all sales tax rates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesTaxRateMap'
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.
  /processingFee:
    get:
      summary: returns each Item Type and its respective processing fee
      responses:
        '200':
          description: List of all processing fees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessingFeeMap'
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /item/{type}:
    get:
      summary: returns all items of the specified type
      parameters:
        - name: type
          in: path
          required: true
          description: The item type
          schema:
            type: string
      responses:
        '200':
          description: List of all games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '422':
          $ref: '#/paths/~itemType' # path variable value is not supported. Use this path to get the list of accepted values.
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /item/{type}/{id}:
    get:
      summary: returns item with specified type and id
      parameters:
        - name: type
          in: path
          required: true
          description: The item type
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The id of the item
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: the item with specified type and id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad Request
        '404':
          description: Id not found
        '422':
          $ref: '#/paths/~itemType' # path variable value is not supported. Use this path to get the list of accepted values.
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /item/{type}/attributes:
    get:
      summary: returns all available attributes for the item of specified type
      parameters:
        - name: type
          in: path
          required: true
          description: The item type
          schema:
            type: string
      responses:
        '200':
          description: List of all item types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attributes'
        '422':
          $ref: '#/paths/~itemType' # path variable value is not supported. Use this path to get the list of accepted values.

  /item/{type}/{attribute}/{value}:
    get:
      summary: returns a list of items of the specified 'type' where 'attribute' is equal to 'value'.
      parameters:
        - name: type
          in: path
          required: true
          description: The item type
          schema:
            type: string
        - name: attribute
          in: path
          required: true
          description: the name of the attribute (or property, or column name) to search in
          schema:
            type: string
        - name: value
          in: path
          required: true
          description: The value of the attribute
          schema:
            type: string
      responses:
        '200':
          description: successfully retrieved list of items with 'attribute' equal to 'value'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '400':
          description: Bad Request
        '404':
          description: Id not found
        '422':
          $ref: '#/paths/~itemType' # path variable value is not supported. Use this path to get the list of accepted values.
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /item/inventory:
    post:
      summary: adds items of the specified type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Items'
      responses:
        '201':
          description: game added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        '400':
          description: Bad Request
        '422':
          description: Missing a field
        '415':
          description: Unsupported media type, the request body should be json
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.
    put:
      summary: updates an existing item(s)
      parameters:
        - name: type
          in: path
          required: true
          description: The item type
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Items'
      responses:
        '204':
          description: the item was successfully updated
        '400':
          description: Bad Request
        '404':
          description: Id not found
        '422':
          description: Missing a field
        '415':
          description: Unsupported media type, the request body should be json
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /item/{type}/inventory/{id}:
    delete:
      summary: deletes an item from the DB of specified type and id
      parameters:
        - name: type
          in: path
          required: true
          description: The item type
          schema:
            type: string
        - name: id
          in: path
          required: true
          description: The id of the item
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: delete successful
        '400':
          description: Bad Request
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /purchase:
    post:
      summary: user is able to purchase items in inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
      responses:
        '201':
          description: t-shirt(s) added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '400':
          description: Bad Request
        '422':
          description: Missing a field
        '415':
          description: Unsupported media type, the request body should be json
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.
        '503':
          description: thrown if processing the full state name is not currently available. Use the state 2-letter code instead

  /purchase/invoice:
    get:
      summary: returns all invoices
      responses:
        '200':
          description: found invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: invoices not found
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /purchase/invoice/{id}:
    get:
      summary: returns an invoice of given id
      parameters:
        - name: id
          in: path
          required: true
          description: The invoice id
          schema:
            type: string
      responses:
        '200':
          description: found invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '404':
          description: invoice not found
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /inventory/fee:
    post:
      summary: add new fees. If a fee already exists, an update is performed instead.
      description: note that adding new fees are not recommended before first creating a ticket with the development team. If you create a new productType and fee, please work with dev-ops so this productType is added to the Business Layer. If not, your customers will not be able to use the new option. You also would not be able to add Items for this new productType.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeTypes'
      responses:
        '207':
          description: successful request. New fees created or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeTypes'
        '400':
          description: Bad Request
        '422':
          description: Missing a field
        '415':
          description: Unsupported media type, the request body should be json
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.
        '503':
          description: thrown is full state name provided, but service to map state to a stateCode is not available
    put:
      summary: updates existing fees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeeTypeMap'
      responses:
        '204':
          description: the fees were successfully updated
        '400':
          description: Bad Request
        '422':
          description: Missing a field
        '415':
          description: Unsupported media type, the request body should be json
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /inventory/{feeType}:
    get:
      summary: returns all available fees of specified type
      parameters:
        - name: feeType
          in: path
          required: true
          description: The type of fee
          schema:
            type: string
            example: possibles values are 'processingFee' or 'salesTaxRate'
      responses:
        '200':
          description: List of all fees of specified type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeType'
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /inventory/{feeType}/{value}:
    get:
      summary: returns the fee or specified type and value.
      parameters:
        - name: feeType
          in: path
          required: true
          description: The type of fee
          schema:
            type: string
            example: possibles values are 'processingFee' or 'salesTaxRate'
        - name: value
          in: path
          required: true
          description: the value to search for.
          schema:
            type: string
      responses:
        '200':
          description: found the fee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeeType'
        '404':
          description: fee not found
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.
    delete:
      summary: deletes a fee of specified type with the given value
      parameters:
        - name: feeType
          in: path
          required: true
          description: The type of fee
          schema:
            type: string
            example: possibles values are 'processingFee' or 'salesTaxRate'
        - name: value
          in: path
          required: true
          description: The value to search for
          schema:
            type: string
      responses:
        '204':
          description: delete successful
        '400':
          description: Bad Request
        '404':
          description: Id not found
        '500':
          description: uncaught server error. i.e. Class failed to instantiate. Class method/field were inaccessible.

  /inventory/{feeType}/reset:
    put:
      summary: updates existing fees
      parameters:
        - name: feeType
          in: path
          required: true
          description: The type of fee
          schema:
            type: string
            example: possibles values are 'processingFee' or 'salesTaxRate'
      responses:
        '204':
          description: the fees were successfully reset

components:
  schemas:
    Game:
      type: object
      properties:
        '$type':
          type: string
          description: value must be 'Games'
        gameId:
          type: integer
          maxLength: 11
        title:
          type: string
          maxLength: 50
        esrbRating:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 255
        studio:
          type: string
          maxLength: 50
        quantity:
          type: integer
          minimum: 1
          maxLength: 11
        price:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
      required:
        - '$type'
        - title
        - esrbRating
        - description
        - studio
        - price
        - quantity
    Console:
      type: object
      properties:
        '$type':
          type: string
          description: value must be 'Consoles'
        consoledId:
          type: integer
          maxLength: 11
        model:
          type: string
          minLength: 1
          maxLength: 50
        manufacturer:
          type: string
          minLength: 1
          maxLength: 50
        memoryAmount:
          type: string
          maxLength: 20
        processor:
          type: string
          maxLength: 20
        quantity:
          type: integer
          minimum: 1
          maxLength: 11
        price:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
      required:
        - '$type'
        - model
        - manufacturer
        - price
        - quantity
    TShirt:
      type: object
      properties:
        '$type':
          type: string
          description: value must be 'T-Shirts'
        tShirtId:
          type: integer
          maxLength: 11
        size:
          type: string
          minLength: 1
          maxLength: 20
        color:
          type: string
          minLength: 1
          maxLength: 20
        description:
          type: string
          minLength: 1
          maxLength: 255
        quantity:
          type: integer
          minimum: 1
          maxLength: 11
        price:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
      required:
        - '$type'
        - size
        - color
        - description
        - price
        - quantity
    Item:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Game'
        - $ref: '#/components/schemas/Console'
        - $ref: '#/components/schemas/TShirt'
    Items:
      type: array
      items:
        $ref: '#/components/schemas/Item'
    ItemTypes:
      type: array
      items:
        type: string
    Attributes:
      type: array
      items:
        type: string
    SalesTaxRateMap:
      type: object
      additionalProperties:
        type: string
    ProcessingFeeMap:
      type: object
      additionalProperties:
        type: string
    ProcessingFee:
      type: object
      properties:
        '$type':
          type: string
          description: value must be 'Processing Fee'
        productType:
          type: string
          minLength: 1
          maxLength: 20
        fee:
          type: number
          pattern: '[0-9]{2}[.][0-9]{2}'
    SalesTaxRate:
      type: object
      properties:
        '$type':
          type: string
          description: value must be 'Sales Tax Rate'
        state:
          type: string
          pattern: '[A-Z]{2}'
        rate:
          type: number
          pattern: '[0-9]{1}[.][0-9]{2}'
    FeeType:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ProcessingFee'
        - $ref: '#/components/schemas/SalesTaxRate'
    FeeTypes:
      type: array
      items:
        $ref: '#/components/schemas/FeeType'
    FeeTypeMap:
      type: object
      description: key is the lookup value that will be used to find the Fee. If the lookup value changed, the the key is the original value.
      additionalProperties:
        $ref: '#/components/schemas/FeeType'
    Purchase:
      type: object
      properties:
        invoiceId:
          type: integer
          maxLength: 11
        name:
          type: string
          maxLength: 80
        street:
          type: string
          maxLength: 30
        city:
          type: string
          maxLength: 30
        state:
          type: string
          maxLength: 30
          description: The state should be the 2-letter abbreviation of the state. However, the service does allow the full state name as well. The service replaces [-+_] with a space character. It replaces periods with a blank character.
        zipcode:
          type: string
          maxLength: 5
        item:
          $ref: '#/components/schemas/Item'
        itemType:
          type: string
          maxLength: 20
        itemId:
          type: integer
          maxLength: 11
        unitPrice:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
        quantity:
          type: integer
          minimum: 1
          maxLength: 11
        subtotal:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
        tax:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
        processingFee:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
        total:
          type: number
          pattern: '[0-9]{3}[.][0-9]{2}'
      required:
        - name
        - street
        - city
        - state
        - zipcode
        - itemType
        - itemId
        - quantity


